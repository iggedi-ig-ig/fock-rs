fn double_factorial(n: u32) -> u32 {
    match n {
        n @ 1..=u32::MAX => (2 - n % 2..=n).step_by(2).product(),
        _ => 1,
    }
}

// see: https://sci-hub.mksa.top/https://doi.org/10.1002/jcc.23935
fn _boys_impl(n: i32, t: f64, mut curr: f64, exp_mt: f64) -> f64 {
    // downwards recursion
    let mut curr_n = MAX_TABULATED_N;
    while curr_n > n {
        curr = (2.0 * t * curr + exp_mt) / (2 * curr_n - 1) as f64;
        curr_n -= 1;
    }
    curr
}

const DT: f64 = 0.1;
const MAX_TABULATED_T: f64 = 35.0;
const MAX_TABULATED_N: i32 = 5;
const N: usize = (MAX_TABULATED_T as f64 / DT) as usize;

const LUT: &[f64; N] = &[
    0.09090909090909091,
    0.08352031793028776,
    0.07674569536624208,
    0.07053330615039198,
    0.06483568025152854,
    0.059609409703928626,
    0.054814797254148236,
    0.050415535667593735,
    0.04637841499967772,
    0.042673055374774616,
    0.03927166303339448,
    0.03614880760589363,
    0.033281218751352544,
    0.030647600464554538,
    0.028228461503714164,
    0.02600596052803753,
    0.023963764658530697,
    0.02208692028878508,
    0.020361735075742973,
    0.018775670134575102,
    0.01731724154760019,
    0.01597593037538469,
    0.01474210042945376,
    0.013606923131038179,
    0.012562308839533869,
    0.011600844088373563,
    0.010715734215265168,
    0.009900750918664327,
    0.009150184313302405,
    0.008458799094938373,
    0.007821794458561711,
    0.007234767445336312,
    0.006693679421906171,
    0.006194825421525298,
    0.005734806100045862,
    0.005310502081301471,
    0.004919050486039006,
    0.004557823456449176,
    0.004224408504674762,
    0.0039165905285745645,
    0.003632335351616546,
    0.0033697746561800325,
    0.00312719219086925,
    0.0029030111427740548,
    0.002695782575045298,
    0.0025041748387615447,
    0.0023269638759226305,
    0.002163024337579896,
    0.0020113214476630194,
    0.0018709035490435998,
    0.0017408952738363244,
    0.0016204912849249174,
    0.0015089505402537692,
    0.0014055910355848923,
    0.001309784985218423,
    0.001220954403644335,
    0.0011385670542625645,
    0.0010621327342040866,
    0.0009911998669308827,
    0.0009253523767096939,
    0.0008642068212631212,
    0.000807409760919808,
    0.0007546353444300796,
    0.0007055830932991728,
    0.0006599758680312099,
    0.0006175580010856983,
    0.0005780935826361145,
    0.0005413648863975483,
    0.0005071709238669342,
    0.00047532611630387445,
    0.0004456590746803331,
    0.0004180114786509238,
    0.00039223704634865417,
    0.00036820058749996947,
    0.0003457771329832214,
    0.0003248511345313851,
    0.00030531572880749175,
    0.00028707206056414455,
    0.000270028660040384,
    0.000254100870153664,
    0.00023921031941493903,
    0.00022528443683382616,
    0.0002122560053911109,
    0.0002000627509400332,
    0.00018864696365798533,
    0.00017795514940856073,
    0.00016793770859216306,
    0.0001585486402633353,
    0.0001497452694761315,
    0.00014148799598669195,
    0.0001337400625959623,
    0.00012646734155643825,
    0.00011963813759598464,
    0.00011322300623018353,
    0.00010719458614321318,
    0.00010152744451678186,
    9.619793427789631e-5,
    9.11840623199349e-5,
    8.646536782825732e-5,
    8.202280991198898e-5,
    7.783866380821783e-5,
    7.389642498410873e-5,
    7.01807205168256e-5,
    6.667722718106866e-5,
    6.337259571984802e-5,
    6.025438081617456e-5,
    5.731097632196232e-5,
    5.453155533589648e-5,
    5.190601475458443e-5,
    4.942492395121629e-5,
    4.7079477263438305e-5,
    4.48614499973849e-5,
    4.276315767801283e-5,
    4.077741829719669e-5,
    3.889751733064021e-5,
    3.711717531267071e-5,
    3.5430517774543345e-5,
    3.3832047367113775e-5,
    3.2316618002741436e-5,
    3.087941086417075e-5,
    2.95159121399891e-5,
    2.8221892357167922e-5,
    2.6993387191227818e-5,
    2.5826679643808202e-5,
    2.4718283485924652e-5,
    2.3664927873028302e-5,
    2.2663543045190738e-5,
    2.1711247032380167e-5,
    2.0805333290910324e-5,
    1.9943259202782158e-5,
    1.9122635374830112e-5,
    1.8341215679372785e-5,
    1.759688798248083e-5,
    1.6887665510042013e-5,
    1.62116788055565e-5,
    1.5567168237054877e-5,
    1.4952477013723379e-5,
    1.4366044675766114e-5,
    1.3806401023752086e-5,
    1.3272160456202483e-5,
    1.27620166864904e-5,
    1.2274737812262737e-5,
    1.1809161712569127e-5,
    1.1364191749706203e-5,
    1.0938792754471546e-5,
    1.0531987275077873e-5,
    1.0142852071417953e-5,
    9.77051483770089e-6,
    9.41415113771062e-6,
    9.072981538075017e-6,
    8.746268925986512e-6,
    8.433315998788385e-6,
    8.13346291374228e-6,
    7.846085087125658e-6,
    7.5705911325805034e-6,
    7.3064209293490615e-6,
    7.053043811694311e-6,
    6.809956871416348e-6,
    6.576683365943795e-6,
    6.3527712250062745e-6,
    6.137791649381651e-6,
    5.931337795664665e-6,
    5.733023541423156e-6,
    5.542482325497255e-6,
    5.359366058558289e-6,
    5.183344099379069e-6,
    5.014102292578626e-6,
    4.851342063892954e-6,
    4.69477956929178e-6,
    4.544144894510411e-6,
    4.399181301797082e-6,
    4.259644520891488e-6,
    4.125302081449829e-6,
    3.995932684317786e-6,
    3.871325609225583e-6,
    3.7512801566399643e-6,
    3.63560512165759e-6,
    3.524118297963496e-6,
    3.416646010007691e-6,
    3.3130226716738444e-6,
    3.2130903698259404e-6,
    3.116698471223781e-6,
    3.023703251395404e-6,
    2.93396754414545e-6,
    2.8473604104632336e-6,
    2.763756825672995e-6,
    2.6830373837427235e-6,
    2.605088017736381e-6,
    2.529799735458564e-6,
    2.457068369400425e-6,
    2.386794340151443e-6,
    2.318882432493861e-6,
    2.253241583445194e-6,
    2.189784681559746e-6,
    2.128428376842625e-6,
    2.0690929006693135e-6,
    2.0117018951411703e-6,
    1.9561822513418524e-6,
    1.9024639559921583e-6,
    1.850479946031169e-6,
    1.8001659706800806e-6,
    1.751460460571586e-6,
    1.704304403552791e-6,
    1.6586412267927694e-6,
    1.6144166848479328e-6,
    1.5715787533587377e-6,
    1.5300775280705189e-6,
    1.4898651288891714e-6,
    1.4508956086994208e-6,
    1.4131248666890406e-6,
    1.3765105659374304e-6,
    1.3410120550407543e-6,
    1.3065902935589862e-6,
    1.2732077810825045e-6,
    1.2408284897273035e-6,
    1.2094177998788698e-6,
    1.1789424390147972e-6,
    1.1493704234458717e-6,
    1.120671002824321e-6,
    1.0928146072763245e-6,
    1.065772797023889e-6,
    1.0395182143686514e-6,
    1.014024537917143e-6,
    9.892664389337634e-7,
    9.652195397138535e-7,
    9.418603738751639e-7,
    9.191663484715445e-7,
    8.971157078378352e-7,
    8.756874990798876e-7,
    8.54861539128257e-7,
    8.34618383278407e-7,
    8.149392951444567e-7,
    7.958062179572967e-7,
    7.772017471415872e-7,
    7.591091041095973e-7,
    7.41512111213068e-7,
    7.243951677973869e-7,
    7.07743227305222e-7,
    6.915417753795256e-7,
    6.75776808918385e-7,
    6.604348160366448e-7,
    6.455027568915347e-7,
    6.309680453316989e-7,
    6.168185313311161e-7,
    6.030424841713086e-7,
    5.896285763371196e-7,
    5.765658680930428e-7,
    5.638437927087753e-7,
    5.514521423041987e-7,
    5.393810542854792e-7,
    5.276209983453823e-7,
    5.161627640022069e-7,
    5.049974486530268e-7,
    4.94116446118071e-7,
    4.835114356542507e-7,
    4.731743714168728e-7,
    4.6309747234960554e-7,
    4.532732124837145e-7,
    4.436943116285149e-7,
    4.3435372643581247e-7,
    4.252446418219751e-7,
    4.1636046273199495e-7,
    4.0769480623070047e-7,
    3.9924149390691715e-7,
    3.9099454457708747e-7,
    3.8294816727546877e-7,
    3.75096754518624e-7,
    3.674348758325104e-7,
    3.5995727153098336e-7,
    3.5265884673507264e-7,
    3.4553466562286216e-7,
    3.3857994590027507e-7,
    3.317900534834989e-7,
    3.25160497384222e-7,
    3.1868692478923503e-7,
    3.1236511632633924e-7,
    3.0619098150887143e-7,
    3.001605543514789e-7,
    2.9426998915013554e-7,
    2.885155564196741e-7,
    2.8289363898242346e-7,
    2.7740072820181743e-7,
    2.7203342035511025e-7,
    2.667884131395956e-7,
    2.616625023069614e-7,
    2.566525784206568e-7,
    2.517556237313642e-7,
    2.469687091658779e-7,
    2.4228899142490193e-7,
    2.3771371018546378e-7,
    2.3324018540383013e-7,
    2.2886581471498405e-7,
    2.2458807092488913e-7,
    2.2040449959192735e-7,
    2.1631271669405174e-7,
    2.123104063783359e-7,
    2.0839531878974345e-7,
    2.0456526797607833e-7,
    2.008181298661891e-7,
    1.9715184031864222e-7,
    1.9356439323817544e-7,
    1.900538387573644e-7,
    1.8661828148103686e-7,
    1.8325587879107328e-7,
    1.7996483920932107e-7,
    1.7674342081645598e-7,
    1.735899297246926e-7,
    1.705027186023534e-7,
    1.6748018524836533e-7,
    1.6452077121484388e-7,
    1.6162296047599186e-7,
    1.587852781416148e-7,
    1.560062892136172e-7,
    1.5328459738391647e-7,
    1.5061884387226187e-7,
    1.4800770630251996e-7,
    1.454498976160299e-7,
    1.4294416502069786e-7,
    1.404892889745449e-7,
    1.3808408220247466e-7,
    1.3572738874507963e-7,
    1.33418083038339e-7,
    1.3115506902312019e-7,
    1.2893727928342505e-7,
    1.267636742123697e-7,
    1.2463324120492268e-7,
    1.2254499387646612e-7,
    1.204979713062744e-7,
    1.1849123730504568e-7,
    1.1652387970565009e-7,
    1.1459500967629078e-7,
    1.1270376105530659e-7,
    1.1084928970686722e-7,
    1.0903077289684934e-7,
    1.0724740868820126e-7,
    1.054984153551297e-7,
    1.0378303081547294e-7,
    1.0210051208064063e-7,
    1.004501347225275e-7,
    9.883119235682871e-8,
    9.724299614220796e-8,
    9.568487429478288e-8,
    9.415617161742038e-8,
    9.265624904334674e-8,
    9.118448319359541e-8,
    8.974026594783891e-8,
    8.8323004028157e-8,
    8.693211859532069e-8,
    8.556704485717679e-8,
    8.422723168873966e-8,
];

pub fn boys_quadrature(t: f64, n: i32) -> f64 {
    let integrand = |x: f64| -> f64 { x.powi(2 * n) * f64::exp(-t * x.powi(2)) };

    const ITERS: i32 = 15;
    const ITERS_F: f64 = ITERS as f64;

    ITERS_F.recip()
        * (integrand(0.0) * 0.5
            + (1..ITERS)
                .map(|k| integrand(k as f64 * ITERS_F.recip()))
                .sum::<f64>()
            + integrand(1.0) * 0.5)
}

pub fn boys(t: f64, n: i32) -> f64 {
    assert!(
        n <= MAX_TABULATED_N,
        "Boys-Function order {} is higher than max tabulated order {}",
        n,
        MAX_TABULATED_N
    );

    if t.abs() < 1e-16 {
        f64::recip((2 * n + 1) as f64)
    } else if t.abs() >= MAX_TABULATED_T {
        double_factorial((2 * n as u32).saturating_sub(1)) as f64
            * f64::powi(2.0, n + 1).recip()
            * f64::sqrt(std::f64::consts::PI * t.powi(-2 * n - 1))
    } else {
        let index_f = N as f64 * t / MAX_TABULATED_T;
        let lower = index_f.floor();
        let upper = index_f.ceil();
        let int_t = index_f - lower;

        let lower = lower as usize;
        let upper = upper as usize;
        let curr_val = int_t * LUT[upper.min(N - 1)] + (1.0 - int_t) * LUT[lower];
        _boys_impl(n, t, curr_val, f64::exp(-t))
    }
}
